import process from 'node:process'
import { execSync } from 'node:child_process'
import { consola } from 'consola'
import { ofetch } from 'ofetch'
import { fetchRepos } from './utils/repos'
import { createPackage, generatePackagesRedirections, getContentPackages, getPackagesWithoutRepo, getReposWithoutPackage, removePackage } from './utils/packages'
import type { GitHubRepo } from './types'

const owner = 'unjs'
const repo = 'website'

/**
 * This script is used in a CI to automatically add or remove new UnJS packages to the website.
 */
async function main() {
  const orgRepos = await fetchRepos()
  const packages = getContentPackages()

  // Repos that does not have a package
  const reposWithoutPackage = getReposWithoutPackage(orgRepos, packages) // Must then add a file
  // Package that does not have a repo
  const packagesWithoutRepo = getPackagesWithoutRepo(packages, orgRepos) // Must then remove a file

  execSync('git config user.name "barbapapazes"')
  execSync('git config user.email "e.soubiran25@gmail.com"')

  for (const repo of reposWithoutPackage)
    await createPR(repo.name, orgRepos, 'add')

  for (const package_ of packagesWithoutRepo)
    await createPR(package_, orgRepos, 'remove')
}

main().catch((err) => {
  consola.error(err)
  process.exit(1)
})

async function createPR(package_: string, repos: GitHubRepo[], operation: 'add' | 'remove') {
  let branch: string = ''
  let type: string = ''
  let title: string = ''
  let description: string = ''

  if (operation === 'add') {
    branch = `feat/add-package/${package_}`
    type = 'feat'
    title = `add ${package_} package`
    description = `Add [\`${package_}\`](https://github.com/unjs/${package_}) package and redirection.`
  }
  else if (operation === 'remove') {
    branch = `fix/remove-package/${package_}`
    type = 'fix'
    title = `remove ${package_} package`
    description = `Remove \`${package_}\` package and redirection.`
  }

  try {
    execSync(`git checkout -b ${branch} origin/main`)
  }
  catch (err) {
    execSync(`git checkout ${branch}`)
  }

  if (operation === 'add') {
    const repo = repos.find(repo => repo.name === package_)
    if (!repo) {
      consola.fatal(`Repo ${package_} not found.`)
      process.exit(1)
    }
    createPackage(repo)
  }
  else if (operation === 'remove') {
    removePackage(package_)
  }

  await generatePackagesRedirections()

  execSync('pnpm run lint:fix')

  execSync('git add ./config/packages-redirects.ts')
  execSync(`git add ./content/4.packages/${package_}.yml`)
  try {
    execSync(`git commit -m "${type}: ${title}"`)
  }
  catch (err) {
    consola.info('No changes to commit.')
    process.exit(0)
  }
  execSync(`git push -u origin ${branch} --force`)

  const [currentPR] = await ofetch(`https://api.github.com/repos/${owner}/${repo}/pulls?head=${owner}:${branch}`)

  // Create PR if none exists
  if (!currentPR) {
    const verb = operation === 'add' ? 'Add' : 'Remove'
    return await ofetch(`https://api.github.com/repos/${owner}/${repo}/pulls`, {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${process.env.GITHUB_TOKEN}`,
      },
      body: {
        title: `${type}: ${title}`,
        head: `${owner}:${branch}`,
        base: 'main',
        body: `${description}\n\n- [ ] ${verb} the missing logo in \`assets/logos\`\n\n_This PR is automatically generated by a script._`,
        assignees: ['barbapapazes'],
        labels: ['package'],
      },
    })
  }
}
